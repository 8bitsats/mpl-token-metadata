name: Create Proposal

# Run on manual dispatch.
on:
  workflow_dispatch:
    inputs:
      program:
        description: Program
        required: true
        default: token-metadata
        type: choice
        options:
          - token-metadata
      cluster:
        description: Cluster environment
        required: true
        default: devnet
        type: choice
        options:
          - devnet
          - mainnet-beta
      bump:
        description: Version bump
        required: true
        default: patch
        type: choice
        options:
          - patch
          - minor
          - major
      proposal_description:
        description: Proposal description
        required: true
        type: string

env:
  CACHE: true

jobs:
  build_programs:
    name: Programs
    uses: ./.github/workflows/build-programs.yml
    secrets: inherit

  test_js:
    name: JS client
    needs: build_programs
    uses: ./.github/workflows/test-js.yml
    secrets: inherit

  deploy_program:
    name: Program / Proposal
    runs-on: ubuntu-latest
    needs: test_js
    permissions:
      contents: write
    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Load environment variables
        run: cat .github/.env >> $GITHUB_ENV

      - name: Install Rust
        uses: metaplex-foundation/actions/install-rust@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}

      - name: Install Solana
        uses: metaplex-foundation/actions/install-solana@v1
        with:
          version: ${{ env.SOLANA_VERSION }}
          cache: ${{ env.CACHE }}

      - name: Install Themis
        uses: ./.github/actions/install-themis

      - name: Set RPC
        run: |
          if [ "${{ inputs.cluster }}" == "devnet" ]; then
            echo RPC=${{ secrets.DEVNET_RPC }} >> $GITHUB_ENV
            echo MINT_TYPE="council" >> $GITHUB_ENV
          elif [ "${{ inputs.cluster }}" == "mainnet-beta" ]; then
            echo RPC=${{ secrets.MAINNET_RPC }} >> $GITHUB_ENV
            echo MINT_TYPE="member" >> $GITHUB_ENV
          else
            echo "Invalid cluster"
            exit 1
          fi

      - name: Determine Program Version
        run: |
          IDL_NAME=`echo "${{ inputs.program }}" | tr - _`
          VERSION=`jq '.version' ./idls/${IDL_NAME}.json | sed 's/"//g'`
          MAJOR=`echo ${VERSION} | cut -d. -f1`
          MINOR=`echo ${VERSION} | cut -d. -f2`
          PATCH=`echo ${VERSION} | cut -d. -f3`
          
          if [ "${{ inputs.bump }}" == "major" ]; then
             MAJOR=$((MAJOR + 1))
             MINOR=0
             PATCH=0
          elif [ "${{ inputs.bump }}" == "minor" ]; then
             MINOR=$((MINOR + 1))
             PATCH=0
          else
             PATCH=$((PATCH + 1))
          fi
          
          echo PROGRAM_VERSION="${MAJOR}.${MINOR}.${PATCH}" >> $GITHUB_ENV
          echo PROGRAM_NAME="mpl_token_metadata" >> $GITHUB_ENV

      - name: Download program builds
        uses: actions/download-artifact@v3
        with:
          name: program-builds

      - name: Create Proposal
        run: |
          echo "Deploying ${{ inputs.program }} to ${{ inputs.cluster }}"
          echo "Creating program buffer"

          echo ${{ secrets.BOT_KEY }} > ./submitter-key.json 

          solana config set -k ./submitter-key.json > /dev/null 2>&1
          solana config set --url ${{ env.RPC }} > /dev/null 2>&1

          BUFFER=$(solana program write-buffer ./programs/.bin/${{ env.PROGRAM_NAME }}.so | awk '{print $2}')
          echo "Buffer: $BUFFER"
          solana program set-buffer-authority --new-buffer-authority ${{ env.GOVERNANCE_ID }} $BUFFER

          RUST_LOG=debug themis upgrade-program \
            --source-buffer $BUFFER \
            --name "Deploy ${{ inputs.program }}@v${{ env.PROGRAM_VERSION }}" \
            --mint-type ${{ env.MINT_TYPE }} \
            --options ["Approve"] \
            --description "${{ inputs.proposal_description }}"

          rm submitter-key.json

      - name: Commit and tag new version
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "proposal(${{ inputs.cluster }}): mpl-${{ inputs.program }} program v${{ env.PROGRAM_VERSION }}"
