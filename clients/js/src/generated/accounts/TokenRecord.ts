/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Option,
  PublicKey,
  RpcAccount,
  Serializer,
  assertAccountExists,
  deserializeAccount,
} from '@lorisleiva/js-core';
import {
  TokenDelegateRole,
  TokenMetadataKey,
  TokenState,
  getTokenDelegateRoleSerializer,
  getTokenMetadataKeySerializer,
  getTokenStateSerializer,
} from '../types';

export type TokenRecord = Account<TokenRecordAccountData>;

export type TokenRecordAccountData = {
  key: TokenMetadataKey;
  bump: number;
  state: TokenState;
  ruleSetRevision: Option<bigint>;
  delegate: Option<PublicKey>;
  delegateRole: Option<TokenDelegateRole>;
};

export type TokenRecordAccountArgs = {
  key: TokenMetadataKey;
  bump: number;
  state: TokenState;
  ruleSetRevision: Option<number | bigint>;
  delegate: Option<PublicKey>;
  delegateRole: Option<TokenDelegateRole>;
};

export async function fetchTokenRecord(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey
): Promise<TokenRecord> {
  const maybeAccount = await context.rpc.getAccount(publicKey);
  assertAccountExists(maybeAccount, 'TokenRecord');
  return deserializeTokenRecord(context, maybeAccount);
}

export async function safeFetchTokenRecord(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey
): Promise<TokenRecord | null> {
  const maybeAccount = await context.rpc.getAccount(publicKey);
  return maybeAccount.exists
    ? deserializeTokenRecord(context, maybeAccount)
    : null;
}

export function deserializeTokenRecord(
  context: Pick<Context, 'serializer'>,
  rawAccount: RpcAccount
): TokenRecord {
  return deserializeAccount(
    rawAccount,
    getTokenRecordAccountDataSerializer(context)
  );
}

export function getTokenRecordAccountDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<TokenRecordAccountArgs, TokenRecordAccountData> {
  const s = context.serializer;
  return s.struct<TokenRecordAccountData>(
    [
      ['key', getTokenMetadataKeySerializer(context)],
      ['bump', s.u8],
      ['state', getTokenStateSerializer(context)],
      ['ruleSetRevision', s.option(s.u64)],
      ['delegate', s.option(s.publicKey)],
      ['delegateRole', s.option(getTokenDelegateRoleSerializer(context))],
    ],
    'TokenRecord'
  ) as Serializer<TokenRecordAccountArgs, TokenRecordAccountData>;
}

export function getTokenRecordSize(
  context: Pick<Context, 'serializer'>
): number | null {
  return getTokenRecordAccountDataSerializer(context).fixedSize;
}
