/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  PublicKey,
  RpcAccount,
  Serializer,
  assertAccountExists,
  deserializeAccount,
} from '@lorisleiva/js-core';
import { TokenMetadataKey, getTokenMetadataKeySerializer } from '../types';

export type UseAuthorityRecord = Account<UseAuthorityRecordAccountData>;

export type UseAuthorityRecordAccountData = {
  key: TokenMetadataKey;
  allowedUses: bigint;
  bump: number;
};

export type UseAuthorityRecordAccountArgs = {
  key: TokenMetadataKey;
  allowedUses: number | bigint;
  bump: number;
};

export async function fetchUseAuthorityRecord(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey
): Promise<UseAuthorityRecord> {
  const maybeAccount = await context.rpc.getAccount(publicKey);
  assertAccountExists(maybeAccount, 'UseAuthorityRecord');
  return deserializeUseAuthorityRecord(context, maybeAccount);
}

export async function safeFetchUseAuthorityRecord(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey
): Promise<UseAuthorityRecord | null> {
  const maybeAccount = await context.rpc.getAccount(publicKey);
  return maybeAccount.exists
    ? deserializeUseAuthorityRecord(context, maybeAccount)
    : null;
}

export function deserializeUseAuthorityRecord(
  context: Pick<Context, 'serializer'>,
  rawAccount: RpcAccount
): UseAuthorityRecord {
  return deserializeAccount(
    rawAccount,
    getUseAuthorityRecordAccountDataSerializer(context)
  );
}

export function getUseAuthorityRecordAccountDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<UseAuthorityRecordAccountArgs, UseAuthorityRecordAccountData> {
  const s = context.serializer;
  return s.struct<UseAuthorityRecordAccountData>(
    [
      ['key', getTokenMetadataKeySerializer(context)],
      ['allowedUses', s.u64],
      ['bump', s.u8],
    ],
    'UseAuthorityRecord'
  ) as Serializer<UseAuthorityRecordAccountArgs, UseAuthorityRecordAccountData>;
}

export function getUseAuthorityRecordSize(_context = {}): number {
  return 10;
}
