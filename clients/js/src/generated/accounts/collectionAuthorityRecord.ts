/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Option,
  Pda,
  PublicKey,
  RpcAccount,
  Serializer,
  assertAccountExists,
  deserializeAccount,
  utf8,
} from '@lorisleiva/js-core';
import { TokenMetadataKey, getTokenMetadataKeySerializer } from '../types';

export type CollectionAuthorityRecord =
  Account<CollectionAuthorityRecordAccountData>;

export type CollectionAuthorityRecordAccountData = {
  key: TokenMetadataKey;
  bump: number;
  updateAuthority: Option<PublicKey>;
};

export async function fetchCollectionAuthorityRecord(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey
): Promise<CollectionAuthorityRecord> {
  const maybeAccount = await context.rpc.getAccount(publicKey);
  assertAccountExists(maybeAccount, 'CollectionAuthorityRecord');
  return deserializeCollectionAuthorityRecord(context, maybeAccount);
}

export async function safeFetchCollectionAuthorityRecord(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey
): Promise<CollectionAuthorityRecord | null> {
  const maybeAccount = await context.rpc.getAccount(publicKey);
  return maybeAccount.exists
    ? deserializeCollectionAuthorityRecord(context, maybeAccount)
    : null;
}

export function deserializeCollectionAuthorityRecord(
  context: Pick<Context, 'serializer'>,
  rawAccount: RpcAccount
): CollectionAuthorityRecord {
  return deserializeAccount(
    rawAccount,
    getCollectionAuthorityRecordAccountDataSerializer(context)
  );
}

export function getCollectionAuthorityRecordAccountDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<CollectionAuthorityRecordAccountData> {
  const s = context.serializer;
  return s.struct<CollectionAuthorityRecordAccountData>(
    [
      ['key', getTokenMetadataKeySerializer(context)],
      ['bump', s.u8],
      ['updateAuthority', s.option(s.publicKey)],
    ],
    'CollectionAuthorityRecord'
  );
}

export function getCollectionAuthorityRecordSize(
  context: Pick<Context, 'serializer'>
): number | null {
  return getCollectionAuthorityRecordAccountDataSerializer(context).fixedSize;
}

export function findCollectionAuthorityRecordPda(
  context: Pick<Context, 'eddsa' | 'programs' | 'serializer'>,
  seeds: {
    /** The address of the mint account */
    mint: PublicKey;
    /** The address of the collection authority */
    collectionAuthority: PublicKey;
  }
): Pda {
  const s = context.serializer;
  const programId: PublicKey =
    context.programs.get('mplTokenMetadata').publicKey;
  return context.eddsa.findPda(programId, [
    utf8.serialize('metadata'),
    programId.bytes,
    s.publicKey.serialize(seeds.mint),
    utf8.serialize('collection_authority'),
    s.publicKey.serialize(seeds.collectionAuthority),
  ]);
}
