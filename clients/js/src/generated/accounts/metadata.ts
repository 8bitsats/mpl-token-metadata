/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Option,
  Pda,
  PublicKey,
  RpcAccount,
  Serializer,
  assertAccountExists,
  deserializeAccount,
  utf8,
} from '@lorisleiva/js-core';
import {
  Collection,
  CollectionDetails,
  CollectionDetailsArgs,
  Creator,
  ProgrammableConfig,
  TokenMetadataKey,
  TokenStandard,
  Uses,
  UsesArgs,
  getCollectionDetailsSerializer,
  getCollectionSerializer,
  getCreatorSerializer,
  getProgrammableConfigSerializer,
  getTokenMetadataKeySerializer,
  getTokenStandardSerializer,
  getUsesSerializer,
} from '../types';

export type Metadata = Account<MetadataAccountData>;

export type MetadataAccountData = {
  key: TokenMetadataKey;
  updateAuthority: PublicKey;
  mint: PublicKey;
  name: string;
  symbol: string;
  uri: string;
  sellerFeeBasisPoints: number;
  creators: Option<Array<Creator>>;
  primarySaleHappened: boolean;
  isMutable: boolean;
  editionNonce: Option<number>;
  tokenStandard: Option<TokenStandard>;
  collection: Option<Collection>;
  uses: Option<Uses>;
  collectionDetails: Option<CollectionDetails>;
  programmableConfig: Option<ProgrammableConfig>;
};

export type MetadataAccountArgs = {
  key: TokenMetadataKey;
  updateAuthority: PublicKey;
  mint: PublicKey;
  name: string;
  symbol: string;
  uri: string;
  sellerFeeBasisPoints: number;
  creators: Option<Array<Creator>>;
  primarySaleHappened: boolean;
  isMutable: boolean;
  editionNonce: Option<number>;
  tokenStandard: Option<TokenStandard>;
  collection: Option<Collection>;
  uses: Option<UsesArgs>;
  collectionDetails: Option<CollectionDetailsArgs>;
  programmableConfig: Option<ProgrammableConfig>;
};

export async function fetchMetadata(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey
): Promise<Metadata> {
  const maybeAccount = await context.rpc.getAccount(publicKey);
  assertAccountExists(maybeAccount, 'Metadata');
  return deserializeMetadata(context, maybeAccount);
}

export async function safeFetchMetadata(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey
): Promise<Metadata | null> {
  const maybeAccount = await context.rpc.getAccount(publicKey);
  return maybeAccount.exists
    ? deserializeMetadata(context, maybeAccount)
    : null;
}

export function deserializeMetadata(
  context: Pick<Context, 'serializer'>,
  rawAccount: RpcAccount
): Metadata {
  return deserializeAccount(
    rawAccount,
    getMetadataAccountDataSerializer(context)
  );
}

export function getMetadataAccountDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<MetadataAccountArgs, MetadataAccountData> {
  const s = context.serializer;
  return s.struct<MetadataAccountData>(
    [
      ['key', getTokenMetadataKeySerializer(context)],
      ['updateAuthority', s.publicKey],
      ['mint', s.publicKey],
      ['name', s.string()],
      ['symbol', s.string()],
      ['uri', s.string()],
      ['sellerFeeBasisPoints', s.u16],
      ['creators', s.option(s.vec(getCreatorSerializer(context)))],
      ['primarySaleHappened', s.bool()],
      ['isMutable', s.bool()],
      ['editionNonce', s.option(s.u8)],
      ['tokenStandard', s.option(getTokenStandardSerializer(context))],
      ['collection', s.option(getCollectionSerializer(context))],
      ['uses', s.option(getUsesSerializer(context))],
      ['collectionDetails', s.option(getCollectionDetailsSerializer(context))],
      [
        'programmableConfig',
        s.option(getProgrammableConfigSerializer(context)),
      ],
    ],
    'Metadata'
  ) as Serializer<MetadataAccountArgs, MetadataAccountData>;
}

export function getMetadataSize(
  context: Pick<Context, 'serializer'>
): number | null {
  return getMetadataAccountDataSerializer(context).fixedSize;
}

export function findMetadataPda(
  context: Pick<Context, 'eddsa' | 'programs' | 'serializer'>,
  seeds: {
    /** The address of the mint account */
    mint: PublicKey;
  }
): Pda {
  const s = context.serializer;
  const programId: PublicKey =
    context.programs.get('mplTokenMetadata').publicKey;
  return context.eddsa.findPda(programId, [
    utf8.serialize('metadata'),
    programId.bytes,
    s.publicKey.serialize(seeds.mint),
  ]);
}
