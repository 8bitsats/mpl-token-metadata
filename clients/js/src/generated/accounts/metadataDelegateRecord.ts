/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  PublicKey,
  RpcAccount,
  Serializer,
  assertAccountExists,
  deserializeAccount,
} from '@lorisleiva/js-core';
import { TokenMetadataKey, getTokenMetadataKeySerializer } from '../types';

export type MetadataDelegateRecord = Account<MetadataDelegateRecordAccountData>;

export type MetadataDelegateRecordAccountData = {
  key: TokenMetadataKey;
  bump: number;
  mint: PublicKey;
  delegate: PublicKey;
  updateAuthority: PublicKey;
};

export async function fetchMetadataDelegateRecord(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey
): Promise<MetadataDelegateRecord> {
  const maybeAccount = await context.rpc.getAccount(publicKey);
  assertAccountExists(maybeAccount, 'MetadataDelegateRecord');
  return deserializeMetadataDelegateRecord(context, maybeAccount);
}

export async function safeFetchMetadataDelegateRecord(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey
): Promise<MetadataDelegateRecord | null> {
  const maybeAccount = await context.rpc.getAccount(publicKey);
  return maybeAccount.exists
    ? deserializeMetadataDelegateRecord(context, maybeAccount)
    : null;
}

export function deserializeMetadataDelegateRecord(
  context: Pick<Context, 'serializer'>,
  rawAccount: RpcAccount
): MetadataDelegateRecord {
  return deserializeAccount(
    rawAccount,
    getMetadataDelegateRecordAccountDataSerializer(context)
  );
}

export function getMetadataDelegateRecordAccountDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<MetadataDelegateRecordAccountData> {
  const s = context.serializer;
  return s.struct<MetadataDelegateRecordAccountData>(
    [
      ['key', getTokenMetadataKeySerializer(context)],
      ['bump', s.u8],
      ['mint', s.publicKey],
      ['delegate', s.publicKey],
      ['updateAuthority', s.publicKey],
    ],
    'MetadataDelegateRecord'
  );
}

export function getMetadataDelegateRecordSize(_context = {}): number {
  return 98;
}
