/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  PublicKey,
  Serializer,
  Signer,
  WrappedInstruction,
  checkForIsWritableOverride as isWritable,
  mapSerializer,
} from '@lorisleiva/js-core';
import { CreateOrUpdateArgs, getCreateOrUpdateArgsSerializer } from '../types';

// Accounts.
export type CreateOrUpdateInstructionAccounts = {
  /** Payer and creator of the RuleSet */
  payer?: Signer;
  /** The PDA account where the RuleSet is stored */
  ruleSetPda: PublicKey;
  /** System program */
  systemProgram?: PublicKey;
  /** The buffer to copy a complete ruleset from */
  bufferPda?: PublicKey;
};

// Arguments.
export type CreateOrUpdateInstructionData = {
  discriminator: number;
  createOrUpdateArgs: CreateOrUpdateArgs;
};

export type CreateOrUpdateInstructionArgs = {
  createOrUpdateArgs: CreateOrUpdateArgs;
};

export function getCreateOrUpdateInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<CreateOrUpdateInstructionArgs, CreateOrUpdateInstructionData> {
  const s = context.serializer;
  return mapSerializer<
    CreateOrUpdateInstructionArgs,
    CreateOrUpdateInstructionData,
    CreateOrUpdateInstructionData
  >(
    s.struct<CreateOrUpdateInstructionData>(
      [
        ['discriminator', s.u8],
        ['createOrUpdateArgs', getCreateOrUpdateArgsSerializer(context)],
      ],
      'CreateOrUpdateInstructionArgs'
    ),
    (value) => ({ discriminator: 0, ...value } as CreateOrUpdateInstructionData)
  ) as Serializer<CreateOrUpdateInstructionArgs, CreateOrUpdateInstructionData>;
}

// Instruction.
export function createOrUpdate(
  context: Pick<Context, 'serializer' | 'programs' | 'payer'>,
  input: CreateOrUpdateInstructionAccounts & CreateOrUpdateInstructionArgs
): WrappedInstruction {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId: PublicKey =
    context.programs.get('mplTokenAuthRules').publicKey;

  // Resolved accounts.
  const payerAccount = input.payer ?? context.payer;
  const ruleSetPdaAccount = input.ruleSetPda;
  const systemProgramAccount = input.systemProgram ?? {
    ...context.programs.get('splSystem').publicKey,
    isWritable: false,
  };
  const bufferPdaAccount = input.bufferPda;

  // Payer.
  signers.push(payerAccount);
  keys.push({
    pubkey: payerAccount.publicKey,
    isSigner: true,
    isWritable: isWritable(payerAccount, true),
  });

  // Rule Set Pda.
  keys.push({
    pubkey: ruleSetPdaAccount,
    isSigner: false,
    isWritable: isWritable(ruleSetPdaAccount, true),
  });

  // System Program.
  keys.push({
    pubkey: systemProgramAccount,
    isSigner: false,
    isWritable: isWritable(systemProgramAccount, false),
  });

  // Buffer Pda (optional).
  if (bufferPdaAccount) {
    keys.push({
      pubkey: bufferPdaAccount,
      isSigner: false,
      isWritable: isWritable(bufferPdaAccount, false),
    });
  }

  // Data.
  const data =
    getCreateOrUpdateInstructionDataSerializer(context).serialize(input);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return {
    instruction: { keys, programId, data },
    signers,
    bytesCreatedOnChain,
  };
}
