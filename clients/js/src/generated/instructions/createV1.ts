/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Amount,
  Context,
  Option,
  PublicKey,
  Serializer,
  Signer,
  WrappedInstruction,
  checkForIsWritableOverride as isWritable,
  isSigner,
  mapAmountSerializer,
  mapSerializer,
  none,
  publicKey,
} from '@lorisleiva/js-core';
import { findMetadataPda } from '../accounts';
import {
  Collection,
  CollectionDetails,
  CollectionDetailsArgs,
  Creator,
  PrintSupply,
  PrintSupplyArgs,
  TokenStandard,
  Uses,
  UsesArgs,
  getCollectionDetailsSerializer,
  getCollectionSerializer,
  getCreatorSerializer,
  getPrintSupplySerializer,
  getTokenStandardSerializer,
  getUsesSerializer,
} from '../types';

// Accounts.
export type CreateV1InstructionAccounts = {
  /** Unallocated metadata account with address as pda of ['metadata', program id, mint id] */
  metadata?: PublicKey;
  /** Unallocated edition account with address as pda of ['metadata', program id, mint, 'edition'] */
  masterEdition?: PublicKey;
  /** Mint of token asset */
  mint: PublicKey | Signer;
  /** Mint authority */
  authority?: Signer;
  /** Payer */
  payer?: Signer;
  /** Update authority for the metadata account */
  updateAuthority?: PublicKey;
  /** System program */
  systemProgram?: PublicKey;
  /** Instructions sysvar account */
  sysvarInstructions?: PublicKey;
  /** SPL Token program */
  splTokenProgram?: PublicKey;
};

// Arguments.
export type CreateV1InstructionData = {
  discriminator: number;
  createV1Discriminator: number;
  name: string;
  symbol: string;
  uri: string;
  sellerFeeBasisPoints: Amount<'%', 2>;
  creators: Option<Array<Creator>>;
  primarySaleHappened: boolean;
  isMutable: boolean;
  tokenStandard: TokenStandard;
  collection: Option<Collection>;
  uses: Option<Uses>;
  collectionDetails: Option<CollectionDetails>;
  ruleSet: Option<PublicKey>;
  decimals: Option<number>;
  printSupply: Option<PrintSupply>;
};

export type CreateV1InstructionArgs = {
  name: string;
  symbol?: string;
  uri: string;
  sellerFeeBasisPoints: Amount<'%', 2>;
  creators: Option<Array<Creator>>;
  primarySaleHappened?: boolean;
  isMutable?: boolean;
  tokenStandard: TokenStandard;
  collection?: Option<Collection>;
  uses?: Option<UsesArgs>;
  collectionDetails?: Option<CollectionDetailsArgs>;
  ruleSet?: Option<PublicKey>;
  decimals?: Option<number>;
  printSupply?: Option<PrintSupplyArgs>;
};

export function getCreateV1InstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<CreateV1InstructionArgs, CreateV1InstructionData> {
  const s = context.serializer;
  return mapSerializer<
    CreateV1InstructionArgs,
    CreateV1InstructionData,
    CreateV1InstructionData
  >(
    s.struct<CreateV1InstructionData>(
      [
        ['discriminator', s.u8],
        ['createV1Discriminator', s.u8],
        ['name', s.string()],
        ['symbol', s.string()],
        ['uri', s.string()],
        ['sellerFeeBasisPoints', mapAmountSerializer(s.u16, '%', 2)],
        ['creators', s.option(s.vec(getCreatorSerializer(context)))],
        ['primarySaleHappened', s.bool()],
        ['isMutable', s.bool()],
        ['tokenStandard', getTokenStandardSerializer(context)],
        ['collection', s.option(getCollectionSerializer(context))],
        ['uses', s.option(getUsesSerializer(context))],
        [
          'collectionDetails',
          s.option(getCollectionDetailsSerializer(context)),
        ],
        ['ruleSet', s.option(s.publicKey)],
        ['decimals', s.option(s.u8)],
        ['printSupply', s.option(getPrintSupplySerializer(context))],
      ],
      'CreateV1InstructionArgs'
    ),
    (value) =>
      ({
        ...value,
        discriminator: 42,
        createV1Discriminator: 0,
        symbol: value.symbol ?? '',
        primarySaleHappened: value.primarySaleHappened ?? false,
        isMutable: value.isMutable ?? true,
        collection: value.collection ?? none(),
        uses: value.uses ?? none(),
        collectionDetails: value.collectionDetails ?? none(),
        ruleSet: value.ruleSet ?? none(),
        decimals: value.decimals ?? none(),
        printSupply: value.printSupply ?? none(),
      } as CreateV1InstructionData)
  ) as Serializer<CreateV1InstructionArgs, CreateV1InstructionData>;
}

// Instruction.
export function createV1(
  context: Pick<
    Context,
    'serializer' | 'programs' | 'eddsa' | 'identity' | 'payer'
  >,
  input: CreateV1InstructionAccounts & CreateV1InstructionArgs
): WrappedInstruction {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId: PublicKey =
    context.programs.get('mplTokenMetadata').publicKey;

  // Resolved accounts.
  const mintAccount = input.mint;
  const metadataAccount =
    input.metadata ??
    findMetadataPda(context, { mint: publicKey(mintAccount) });
  const masterEditionAccount = input.masterEdition ?? {
    ...programId,
    isWritable: false,
  };
  const authorityAccount = input.authority ?? context.identity;
  const payerAccount = input.payer ?? context.payer;
  const updateAuthorityAccount =
    input.updateAuthority ?? context.identity.publicKey;
  const systemProgramAccount = input.systemProgram ?? {
    ...context.programs.get('splSystem').publicKey,
    isWritable: false,
  };
  const sysvarInstructionsAccount =
    input.sysvarInstructions ??
    publicKey('Sysvar1nstructions1111111111111111111111111');
  const splTokenProgramAccount = input.splTokenProgram ?? {
    ...context.programs.get('splToken').publicKey,
    isWritable: false,
  };

  // Metadata.
  keys.push({
    pubkey: metadataAccount,
    isSigner: false,
    isWritable: isWritable(metadataAccount, true),
  });

  // Master Edition.
  keys.push({
    pubkey: masterEditionAccount,
    isSigner: false,
    isWritable: isWritable(masterEditionAccount, true),
  });

  // Mint.
  if (isSigner(mintAccount)) {
    signers.push(mintAccount);
  }
  keys.push({
    pubkey: publicKey(mintAccount),
    isSigner: isSigner(mintAccount),
    isWritable: isWritable(mintAccount, true),
  });

  // Authority.
  signers.push(authorityAccount);
  keys.push({
    pubkey: authorityAccount.publicKey,
    isSigner: true,
    isWritable: isWritable(authorityAccount, false),
  });

  // Payer.
  signers.push(payerAccount);
  keys.push({
    pubkey: payerAccount.publicKey,
    isSigner: true,
    isWritable: isWritable(payerAccount, true),
  });

  // Update Authority.
  keys.push({
    pubkey: updateAuthorityAccount,
    isSigner: false,
    isWritable: isWritable(updateAuthorityAccount, false),
  });

  // System Program.
  keys.push({
    pubkey: systemProgramAccount,
    isSigner: false,
    isWritable: isWritable(systemProgramAccount, false),
  });

  // Sysvar Instructions.
  keys.push({
    pubkey: sysvarInstructionsAccount,
    isSigner: false,
    isWritable: isWritable(sysvarInstructionsAccount, false),
  });

  // Spl Token Program.
  keys.push({
    pubkey: splTokenProgramAccount,
    isSigner: false,
    isWritable: isWritable(splTokenProgramAccount, false),
  });

  // Data.
  const data = getCreateV1InstructionDataSerializer(context).serialize(input);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 1427;

  return {
    instruction: { keys, programId, data },
    signers,
    bytesCreatedOnChain,
  };
}
