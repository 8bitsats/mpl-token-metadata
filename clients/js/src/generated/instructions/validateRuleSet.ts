/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  PublicKey,
  Serializer,
  Signer,
  WrappedInstruction,
  checkForIsWritableOverride as isWritable,
  mapSerializer,
} from '@lorisleiva/js-core';
import {
  ValidateRuleSetArgs,
  ValidateRuleSetArgsArgs,
  getValidateRuleSetArgsSerializer,
} from '../types';

// Accounts.
export type ValidateRuleSetInstructionAccounts = {
  /** The PDA account where the RuleSet is stored */
  ruleSetPda: PublicKey;
  /** Mint of token asset */
  mint: PublicKey;
  /** System program */
  systemProgram?: PublicKey;
  /** Payer for RuleSet state PDA account */
  payer?: Signer;
  /** Signing authority for any Rule state updates */
  ruleAuthority?: Signer;
  /** The PDA account where any RuleSet state is stored */
  ruleSetStatePda?: PublicKey;
};

// Arguments.
export type ValidateRuleSetInstructionData = {
  discriminator: number;
  validateArgs: ValidateRuleSetArgs;
};

export type ValidateRuleSetInstructionArgs = {
  validateArgs: ValidateRuleSetArgsArgs;
};

export function getValidateRuleSetInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<ValidateRuleSetInstructionArgs, ValidateRuleSetInstructionData> {
  const s = context.serializer;
  return mapSerializer<
    ValidateRuleSetInstructionArgs,
    ValidateRuleSetInstructionData,
    ValidateRuleSetInstructionData
  >(
    s.struct<ValidateRuleSetInstructionData>(
      [
        ['discriminator', s.u8],
        ['validateArgs', getValidateRuleSetArgsSerializer(context)],
      ],
      'ValidateRuleSetInstructionArgs'
    ),
    (value) =>
      ({ discriminator: 1, ...value } as ValidateRuleSetInstructionData)
  ) as Serializer<
    ValidateRuleSetInstructionArgs,
    ValidateRuleSetInstructionData
  >;
}

// Instruction.
export function validateRuleSet(
  context: Pick<Context, 'serializer' | 'programs'>,
  input: ValidateRuleSetInstructionAccounts & ValidateRuleSetInstructionArgs
): WrappedInstruction {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId: PublicKey =
    context.programs.get('mplTokenAuthRules').publicKey;

  // Resolved accounts.
  const ruleSetPdaAccount = input.ruleSetPda;
  const mintAccount = input.mint;
  const systemProgramAccount = input.systemProgram ?? {
    ...context.programs.get('splSystem').publicKey,
    isWritable: false,
  };
  const payerAccount = input.payer;
  const ruleAuthorityAccount = input.ruleAuthority;
  const ruleSetStatePdaAccount = input.ruleSetStatePda;

  // Rule Set Pda.
  keys.push({
    pubkey: ruleSetPdaAccount,
    isSigner: false,
    isWritable: isWritable(ruleSetPdaAccount, false),
  });

  // Mint.
  keys.push({
    pubkey: mintAccount,
    isSigner: false,
    isWritable: isWritable(mintAccount, false),
  });

  // System Program.
  keys.push({
    pubkey: systemProgramAccount,
    isSigner: false,
    isWritable: isWritable(systemProgramAccount, false),
  });

  // Payer (optional).
  if (payerAccount) {
    signers.push(payerAccount);
    keys.push({
      pubkey: payerAccount.publicKey,
      isSigner: true,
      isWritable: isWritable(payerAccount, true),
    });
  }

  // Rule Authority (optional).
  if (ruleAuthorityAccount) {
    signers.push(ruleAuthorityAccount);
    keys.push({
      pubkey: ruleAuthorityAccount.publicKey,
      isSigner: true,
      isWritable: isWritable(ruleAuthorityAccount, false),
    });
  }

  // Rule Set State Pda (optional).
  if (ruleSetStatePdaAccount) {
    keys.push({
      pubkey: ruleSetStatePdaAccount,
      isSigner: false,
      isWritable: isWritable(ruleSetStatePdaAccount, true),
    });
  }

  // Data.
  const data =
    getValidateRuleSetInstructionDataSerializer(context).serialize(input);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return {
    instruction: { keys, programId, data },
    signers,
    bytesCreatedOnChain,
  };
}
