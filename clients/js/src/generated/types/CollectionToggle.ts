/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  GetDataEnumKind,
  GetDataEnumKindContent,
  Serializer,
} from '@lorisleiva/js-core';
import { Collection, getCollectionSerializer } from '.';

export type CollectionToggle =
  | { __kind: 'None' }
  | { __kind: 'Clear' }
  | { __kind: 'Set'; fields: [Collection] };

export function getCollectionToggleSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<CollectionToggle> {
  const s = context.serializer;
  return s.dataEnum<CollectionToggle>(
    [
      ['None', s.unit],
      ['Clear', s.unit],
      [
        'Set',
        s.struct<GetDataEnumKindContent<CollectionToggle, 'Set'>>(
          [['fields', s.tuple([getCollectionSerializer(context)])]],
          'Set'
        ),
      ],
    ],
    undefined,
    'CollectionToggle'
  );
}

// Data Enum Helpers.
export function collectionToggle(
  kind: 'None'
): GetDataEnumKind<CollectionToggle, 'None'>;
export function collectionToggle(
  kind: 'Clear'
): GetDataEnumKind<CollectionToggle, 'Clear'>;
export function collectionToggle(
  kind: 'Set',
  data: GetDataEnumKindContent<CollectionToggle, 'Set'>['fields']
): GetDataEnumKind<CollectionToggle, 'Set'>;
export function collectionToggle<K extends CollectionToggle['__kind']>(
  kind: K,
  data?: any
): CollectionToggle & { __kind: K } {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}
export function isCollectionToggle<K extends CollectionToggle['__kind']>(
  kind: K,
  value: CollectionToggle
): value is CollectionToggle & { __kind: K } {
  return value.__kind === kind;
}
