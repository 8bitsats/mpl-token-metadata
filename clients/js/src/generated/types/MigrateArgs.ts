/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  GetDataEnumKind,
  GetDataEnumKindContent,
  Option,
  PublicKey,
  Serializer,
} from '@lorisleiva/js-core';
import { MigrationType, getMigrationTypeSerializer } from '.';

export type MigrateArgs = {
  __kind: 'V1';
  migration_type: MigrationType;
  rule_set: Option<PublicKey>;
};

export function getMigrateArgsSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<MigrateArgs> {
  const s = context.serializer;
  return s.dataEnum<MigrateArgs>(
    [
      [
        'V1',
        s.struct<GetDataEnumKindContent<MigrateArgs, 'V1'>>(
          [
            ['migration_type', getMigrationTypeSerializer(context)],
            ['rule_set', s.option(s.publicKey)],
          ],
          'V1'
        ),
      ],
    ],
    undefined,
    'MigrateArgs'
  );
}

// Data Enum Helpers.
export function migrateArgs(
  kind: 'V1',
  data: GetDataEnumKindContent<MigrateArgs, 'V1'>
): GetDataEnumKind<MigrateArgs, 'V1'>;
export function migrateArgs<K extends MigrateArgs['__kind']>(
  kind: K,
  data?: any
): MigrateArgs & { __kind: K } {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}
export function isMigrateArgs<K extends MigrateArgs['__kind']>(
  kind: K,
  value: MigrateArgs
): value is MigrateArgs & { __kind: K } {
  return value.__kind === kind;
}
