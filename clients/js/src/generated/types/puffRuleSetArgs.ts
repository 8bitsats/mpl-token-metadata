/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  GetDataEnumKind,
  GetDataEnumKindContent,
  Serializer,
} from '@metaplex-foundation/umi-core';

export type PuffRuleSetArgs = { __kind: 'V1'; ruleSetName: string };

export function getPuffRuleSetArgsSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<PuffRuleSetArgs> {
  const s = context.serializer;
  return s.dataEnum<PuffRuleSetArgs>(
    [
      [
        'V1',
        s.struct<GetDataEnumKindContent<PuffRuleSetArgs, 'V1'>>(
          [['ruleSetName', s.string()]],
          'V1'
        ),
      ],
    ],
    undefined,
    'PuffRuleSetArgs'
  );
}

// Data Enum Helpers.
export function puffRuleSetArgs(
  kind: 'V1',
  data: GetDataEnumKindContent<PuffRuleSetArgs, 'V1'>
): GetDataEnumKind<PuffRuleSetArgs, 'V1'>;
export function puffRuleSetArgs<K extends PuffRuleSetArgs['__kind']>(
  kind: K,
  data?: any
): Extract<PuffRuleSetArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}
export function isPuffRuleSetArgs<K extends PuffRuleSetArgs['__kind']>(
  kind: K,
  value: PuffRuleSetArgs
): value is PuffRuleSetArgs & { __kind: K } {
  return value.__kind === kind;
}
