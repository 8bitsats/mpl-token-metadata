/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  GetDataEnumKind,
  GetDataEnumKindContent,
  Option,
  Serializer,
} from '@metaplex-foundation/umi-core';
import { Payload, PayloadArgs, getPayloadSerializer } from '.';

export type ValidateRuleSetArgs = {
  __kind: 'V1';
  operation: string;
  payload: Payload;
  updateRuleState: boolean;
  ruleSetRevision: Option<bigint>;
};

export type ValidateRuleSetArgsArgs = {
  __kind: 'V1';
  operation: string;
  payload: PayloadArgs;
  updateRuleState: boolean;
  ruleSetRevision: Option<number | bigint>;
};

export function getValidateRuleSetArgsSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<ValidateRuleSetArgsArgs, ValidateRuleSetArgs> {
  const s = context.serializer;
  return s.dataEnum<ValidateRuleSetArgs>(
    [
      [
        'V1',
        s.struct<GetDataEnumKindContent<ValidateRuleSetArgs, 'V1'>>(
          [
            ['operation', s.string()],
            ['payload', getPayloadSerializer(context)],
            ['updateRuleState', s.bool()],
            ['ruleSetRevision', s.option(s.u64)],
          ],
          'V1'
        ),
      ],
    ],
    undefined,
    'ValidateRuleSetArgs'
  ) as Serializer<ValidateRuleSetArgsArgs, ValidateRuleSetArgs>;
}

// Data Enum Helpers.
export function validateRuleSetArgs(
  kind: 'V1',
  data: GetDataEnumKindContent<ValidateRuleSetArgsArgs, 'V1'>
): GetDataEnumKind<ValidateRuleSetArgsArgs, 'V1'>;
export function validateRuleSetArgs<
  K extends ValidateRuleSetArgsArgs['__kind']
>(kind: K, data?: any): Extract<ValidateRuleSetArgsArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}
export function isValidateRuleSetArgs<K extends ValidateRuleSetArgs['__kind']>(
  kind: K,
  value: ValidateRuleSetArgs
): value is ValidateRuleSetArgs & { __kind: K } {
  return value.__kind === kind;
}
