/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  GetDataEnumKind,
  GetDataEnumKindContent,
  Serializer,
} from '@lorisleiva/js-core';

export type WriteRuleSetToBufferArgs = {
  __kind: 'V1';
  serializedRuleSet: Uint8Array;
  overwrite: boolean;
};

export function getWriteRuleSetToBufferArgsSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<WriteRuleSetToBufferArgs> {
  const s = context.serializer;
  return s.dataEnum<WriteRuleSetToBufferArgs>(
    [
      [
        'V1',
        s.struct<GetDataEnumKindContent<WriteRuleSetToBufferArgs, 'V1'>>(
          [
            ['serializedRuleSet', s.bytes],
            ['overwrite', s.bool()],
          ],
          'V1'
        ),
      ],
    ],
    undefined,
    'WriteRuleSetToBufferArgs'
  );
}

// Data Enum Helpers.
export function writeRuleSetToBufferArgs(
  kind: 'V1',
  data: GetDataEnumKindContent<WriteRuleSetToBufferArgs, 'V1'>
): GetDataEnumKind<WriteRuleSetToBufferArgs, 'V1'>;
export function writeRuleSetToBufferArgs<
  K extends WriteRuleSetToBufferArgs['__kind']
>(kind: K, data?: any): Extract<WriteRuleSetToBufferArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}
export function isWriteRuleSetToBufferArgs<
  K extends WriteRuleSetToBufferArgs['__kind']
>(
  kind: K,
  value: WriteRuleSetToBufferArgs
): value is WriteRuleSetToBufferArgs & { __kind: K } {
  return value.__kind === kind;
}
